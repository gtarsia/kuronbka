  .INESPRG 1   ; 1X 16KB PRG CODE
  .INESCHR 1   ; 1X  8KB CHR DATA
  .INESMAP 0   ; MAPPER 0 = NROM, NO BANK SWAPPING
  .INESMIR 1   ; BACKGROUND MIRRORING

;;;;;;;;;;;;;;;

; DECLARE VARIABLES HERE
  .RSSET $0000  ;;START VARIABLES AT RAM LOCATION 0
FALLING .RS 1

GORIGHT .RS 1
GOLEFT  .RS 1

RIGHTUPCOUNTER .RS 1
RIGHTDOWNCOUNTER .RS 1

GOINGRIGHTUP .RS 1
GOINGRIGHTDOWN .RS 1

LEFTUPCOUNTER .RS 1
LEFTDOWNCOUNTER .RS 1

GOINGLEFTUP .RS 1
GOINGLEFTDOWN .RS 1

RIGHTSWITCHED .RS 1
LEFTSWITCHED .RS 1

  .BANK 0
  .ORG $C000 

SWITCHRIGHTUPDOWNSUB:
  LDA #$0
  STA GOINGRIGHTUP      ;MAKE IT GO DOWN
  LDA #$1
  STA GOINGRIGHTDOWN
  STA RIGHTSWITCHED
  RTI

SWITCHLEFTUPDOWNSUB:
  LDA #$0
  STA GOINGLEFTUP       ;MAKE IT GO DOWN
  LDA #$1
  STA GOINGLEFTDOWN
  STA LEFTSWITCHED
  RTI

ADVANCEFRAMEFUNC:
  LDX $0201
  CPX #$1
  INY

  BEQ MAKEFRAMEZERO
  BNE MAKEFRAMEONE
  RTI

MAKEFRAMEZERO:
  STY $7FFF
  LDA $7FFF
  LSR A
  LSR A
  LSR A
  BCS MAKEFRAMEONEFINAL
MAKEFRAMEZEROFINAL:
  LDA #$0
  STA $0201
  RTI

MAKEFRAMEONE:
  STY $7FFF
  LDA $7FFF
  LSR A
  LSR A
  LSR A
  BCS MAKEFRAMEZEROFINAL
MAKEFRAMEONEFINAL:
  LDA #$1
  STA $0201
  RTI

RESET:
  SEI          ; DISABLE IRQS
  CLD          ; DISABLE DECIMAL MODE
  LDX #$40
  STX $4017    ; DISABLE APU FRAME IRQ
  LDX #$FF
  TXS          ; SET UP STACK
  INX          ; NOW X = 0
  STX $2000    ; DISABLE NMI
  STX $2001    ; DISABLE RENDERING
  STX $4010    ; DISABLE DMC IRQS

VBLANKWAIT1:       ; FIRST WAIT FOR VBLANK TO MAKE SURE PPU IS READY
  BIT $2002
  BPL VBLANKWAIT1

CLRMEM:
  LDA #$00
  STA $0000, X
  STA $0100, X
  STA $0200, X
  STA $0400, X
  STA $0500, X
  STA $0600, X
  STA $0700, X
  LDA #$FE
  STA $0300, X
  INX
  BNE CLRMEM
   
VBLANKWAIT2:      ; SECOND WAIT FOR VBLANK, PPU IS READY AFTER THIS
  BIT $2002
  BPL VBLANKWAIT2
  LDA #$1
  STA FALLING
  LDA #$0


LOADPALETTES:
  LDA $2002             ; READ PPU STATUS TO RESET THE HIGH/LOW LATCH
  LDA #$3F
  STA $2006             ; WRITE THE HIGH BYTE OF $3F00 ADDRESS
  LDA #$00
  STA $2006             ; WRITE THE LOW BYTE OF $3F00 ADDRESS
  LDX #$00              ; START OUT AT 0
LOADPALETTESLOOP:
  LDA PALETTE, X        ; LOAD DATA FROM ADDRESS (PALETTE + THE VALUE IN X)
                          ; 1ST TIME THROUGH LOOP IT WILL LOAD PALETTE+0
                          ; 2ND TIME THROUGH LOOP IT WILL LOAD PALETTE+1
                          ; 3RD TIME THROUGH LOOP IT WILL LOAD PALETTE+2
                          ; ETC
  STA $2007             ; WRITE TO PPU
  INX                   ; X = X + 1
  CPX #$20              ; COMPARE X TO HEX $10, DECIMAL 16 - COPYING 16 BYTES = 4 SPRITES
  BNE LOADPALETTESLOOP  ; BRANCH TO LOADPALETTESLOOP IF COMPARE WAS NOT EQUAL TO ZERO
                        ; IF COMPARE WAS EQUAL TO 32, KEEP GOING DOWN



LOADSPRITES:
  LDX #$00              ; START AT 0
LOADSPRITESLOOP:
  LDA SPRITES, X        ; LOAD DATA FROM ADDRESS (SPRITES +  X)
  STA $0200, X          ; STORE INTO RAM ADDRESS ($0200 + X)
  INX                   ; X = X + 1
  CPX #$20              ; COMPARE X TO HEX $20, DECIMAL 32
  BNE LOADSPRITESLOOP   ; BRANCH TO LOADSPRITESLOOP IF COMPARE WAS NOT EQUAL TO ZERO
                        ; IF COMPARE WAS EQUAL TO 32, KEEP GOING DOWN
              
              

  LDA #%10000000   ; ENABLE NMI, SPRITES FROM PATTERN TABLE 1
  STA $2000

  LDA #%00010010   ; ENABLE SPRITES
  STA $2001

FOREVER:
  JMP FOREVER     ;JUMP BACK TO FOREVER, INFINITE LOOP

NMI:
  LDA #$00
  STA $2003       ; SET THE LOW BYTE (00) OF THE RAM ADDRESS
  LDA #$02
  STA $4014       ; SET THE HIGH BYTE (02) OF THE RAM ADDRESS, START THE TRANSFER

LATCHCONTROLLER:
  LDA #$01
  STA $4016
  LDA #$00
  STA $4016       ;LATCH BUTTONS
