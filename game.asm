.INESPRG 1   ; 1X 16KB PRG CODE
  .INESCHR 1   ; 1X  8KB CHR DATA
  .INESMAP 0   ; MAPPER 0 = NROM, NO BANK SWAPPING
  .INESMIR 1   ; BACKGROUND MIRRORING

;;;;;;;;;;;;;;;

; DECLARE VARIABLES HERE
  .RSSET $0000  ;;START VARIABLES AT RAM LOCATION 0
FALLING .RS 1

GORIGHT .RS 1
GOLEFT  .RS 1

RIGHTUPCOUNTER .RS 1
RIGHTDOWNCOUNTER .RS 1

GOINGRIGHTUP .RS 1
GOINGRIGHTDOWN .RS 1

LEFTUPCOUNTER .RS 1
LEFTDOWNCOUNTER .RS 1

GOINGLEFTUP .RS 1
GOINGLEFTDOWN .RS 1

RIGHTSWITCHED .RS 1
LEFTSWITCHED .RS 1

  .BANK 0
  .ORG $C000 

SWITCHRIGHTUPDOWNSUB:
  LDA #$0
  STA GOINGRIGHTUP      ;MAKE IT GO DOWN
  LDA #$1
  STA GOINGRIGHTDOWN
  STA RIGHTSWITCHED
  RTI

SWITCHLEFTUPDOWNSUB:
  LDA #$0
  STA GOINGLEFTUP       ;MAKE IT GO DOWN
  LDA #$1
  STA GOINGLEFTDOWN
  STA LEFTSWITCHED
  RTI

ADVANCEFRAMEFUNC:
  LDX $0201
  CPX #$1
  INY

  BEQ MAKEFRAMEZERO
  BNE MAKEFRAMEONE
  RTI

MAKEFRAMEZERO:
  STY $7FFF
  LDA $7FFF
  LSR A
  LSR A
  LSR A
  BCS MAKEFRAMEONEFINAL
MAKEFRAMEZEROFINAL:
  LDA #$0
  STA $0201
  RTI

MAKEFRAMEONE:
  STY $7FFF
  LDA $7FFF
  LSR A
  LSR A
  LSR A
  BCS MAKEFRAMEZEROFINAL
MAKEFRAMEONEFINAL:
  LDA #$1
  STA $0201
  RTI

RESET:
  SEI          ; DISABLE IRQS
  CLD          ; DISABLE DECIMAL MODE
  LDX #$40
  STX $4017    ; DISABLE APU FRAME IRQ
  LDX #$FF
  TXS          ; SET UP STACK
  INX          ; NOW X = 0
  STX $2000    ; DISABLE NMI
  STX $2001    ; DISABLE RENDERING
  STX $4010    ; DISABLE DMC IRQS

VBLANKWAIT1:       ; FIRST WAIT FOR VBLANK TO MAKE SURE PPU IS READY
  BIT $2002
  BPL VBLANKWAIT1

CLRMEM:
  LDA #$00
  STA $0000, X
  STA $0100, X
  STA $0200, X
  STA $0400, X
  STA $0500, X
  STA $0600, X
  STA $0700, X
  LDA #$FE
  STA $0300, X
  INX
  BNE CLRMEM
   
VBLANKWAIT2:      ; SECOND WAIT FOR VBLANK, PPU IS READY AFTER THIS
  BIT $2002
  BPL VBLANKWAIT2
  LDA #$1
  STA FALLING
  LDA #$0


LOADPALETTES:
  LDA $2002             ; READ PPU STATUS TO RESET THE HIGH/LOW LATCH
  LDA #$3F
  STA $2006             ; WRITE THE HIGH BYTE OF $3F00 ADDRESS
  LDA #$00
  STA $2006             ; WRITE THE LOW BYTE OF $3F00 ADDRESS
  LDX #$00              ; START OUT AT 0
LOADPALETTESLOOP:
  LDA PALETTE, X        ; LOAD DATA FROM ADDRESS (PALETTE + THE VALUE IN X)
                          ; 1ST TIME THROUGH LOOP IT WILL LOAD PALETTE+0
                          ; 2ND TIME THROUGH LOOP IT WILL LOAD PALETTE+1
                          ; 3RD TIME THROUGH LOOP IT WILL LOAD PALETTE+2
                          ; ETC
  STA $2007             ; WRITE TO PPU
  INX                   ; X = X + 1
  CPX #$20              ; COMPARE X TO HEX $10, DECIMAL 16 - COPYING 16 BYTES = 4 SPRITES
  BNE LOADPALETTESLOOP  ; BRANCH TO LOADPALETTESLOOP IF COMPARE WAS NOT EQUAL TO ZERO
                        ; IF COMPARE WAS EQUAL TO 32, KEEP GOING DOWN



LOADSPRITES:
  LDX #$00              ; START AT 0
LOADSPRITESLOOP:
  LDA SPRITES, X        ; LOAD DATA FROM ADDRESS (SPRITES +  X)
  STA $0200, X          ; STORE INTO RAM ADDRESS ($0200 + X)
  INX                   ; X = X + 1
  CPX #$20              ; COMPARE X TO HEX $20, DECIMAL 32
  BNE LOADSPRITESLOOP   ; BRANCH TO LOADSPRITESLOOP IF COMPARE WAS NOT EQUAL TO ZERO
                        ; IF COMPARE WAS EQUAL TO 32, KEEP GOING DOWN
              
              

  LDA #%10000000   ; ENABLE NMI, SPRITES FROM PATTERN TABLE 1
  STA $2000

  LDA #%00010010   ; ENABLE SPRITES
  STA $2001

FOREVER:
  JMP FOREVER     ;JUMP BACK TO FOREVER, INFINITE LOOP

NMI:
  LDA #$00
  STA $2003       ; SET THE LOW BYTE (00) OF THE RAM ADDRESS
  LDA #$02
  STA $4014       ; SET THE HIGH BYTE (02) OF THE RAM ADDRESS, START THE TRANSFER

LATCHCONTROLLER:
  LDA #$01
  STA $4016
  LDA #$00
  STA $4016       ;LATCH BUTTONS

;===============================================
;BUTTON READING STRUCTURE
;===============================================
; READBUTTON:             START OF FUNCTION
;   LDA $4016             READ CONTROLLER VALUE
;   AND #%00000001        READ ONLY BIT 0
;   BEQ READBUTTONDONE    IF 0 THEN GO TO END
;                         IF 1 THEN DONT BRANCH AND MOVE ON
;
;   DO STUFF 
;
; READBUTTONDONE:         END OF FUNCTION


READA: 
  LDA $4016
  AND #%00000001
  BEQ READADONE  

CONTINUEREADA:
  LDA #%01000000        ;FLIP SPRITE HORIZONTALLY TO THE RIGHT
  STA $0202

  LDA #$1                 ;SET ALL VARIABLES TO ZERO TO HAVE AN ABILITY TO ASCEND
  STA GORIGHT
  STA GOINGRIGHTUP
  LDA #$0
  STA RIGHTDOWNCOUNTER
  STA RIGHTUPCOUNTER
  STA GOINGRIGHTDOWN
  STA GOINGRIGHTDOWN
  STA RIGHTSWITCHED

  STA GOLEFT
  STA LEFTUPCOUNTER
  STA LEFTDOWNCOUNTER
  STA GOINGLEFTUP
  STA GOINGLEFTDOWN
  STA LEFTSWITCHED

  JMP JUMPRIGHT           ;JUMP TO FUNCTION

SWITCHRIGHTUPDOWN:          ;STOP MOVING UP AND GO DOWN
  JSR SWITCHRIGHTUPDOWNSUB

READADONE:
  
JUMPRIGHT:
  LDA GORIGHT       ;DONT GO RIGHT CONSTANTLY
  CMP #$1
  BEQ CONTINUERIGHT ;USE TRICK TO EXTEND REACH OF CODE POINTER
  JMP JUMPRIGHTEND  ;LEAVE CYCLE IF VARIABLE NOT SET

CONTINUERIGHT:
  LDA #$0
  STA FALLING

JUMPUPRIGHTLOOP:          ;START A LOOP TO MOVE RIGHT AND UP DIAGONALLY
  LDA GOINGRIGHTDOWN      ;SEE IF THE BIRD IS SUPPOSED TO MOVE DOWNWARDS
  CMP #$1
  BEQ JUMPUPRIGHTLOOPEND

  LDA #$1                 ;PREVENT IT DROM GOING DOWN
  STA GOINGRIGHTUP
  LDA #$0
  STA GOINGRIGHTDOWN

  INC RIGHTUPCOUNTER      ;MAKE A COUNTER FOR THE AMOUNT OF FRAMES THE BIRD IS GOING UP
  LDA RIGHTUPCOUNTER
  CMP #$05
  BEQ JUMPUPRIGHTLOOPEND

  LDA $0200     ;MOVE SPRITE UP
  CLC
  SBC #$02
  STA $0200

  LDA $0203     ;MOVE SPRITE RIGHT
  CLC
  ADC #$02
  STA $0203
JUMPUPRIGHTLOOPEND:       ;VERIFY THAT THE CYCLE ABOVE IS COMPLETED AND THAT IT CAN NOW GO DOWN
  LDA RIGHTSWITCHED
  CMP #$1
  BEQ JUMPDOWNRIGHTLOOP
  LDA RIGHTUPCOUNTER
  CMP #$05
  BEQ SWITCHRIGHTUPDOWN

JUMPDOWNRIGHTLOOP:        ;GO DOWN
  LDA GOINGRIGHTUP          ;SEE IF THE BIRD IS SUPPOSED TO GO DOWN
  CMP #$1
  BEQ JUMPDOWNRIGHTLOOPEND

  LDA #$1                   ;PREVENT IT FROM GOING UP
  STA GOINGRIGHTDOWN
  LDA #$0
  STA GOINGRIGHTUP

  INC RIGHTDOWNCOUNTER        ;MAKE A COUNTER TO COUNT HOW MANY FRAMES THE BIRD GOES DOWN
  LDA RIGHTDOWNCOUNTER
  CMP #$08
  BEQ JUMPDOWNRIGHTLOOPEND

  LDA $0200     ;MOVE SPRITE DOWN
  CLC
  ADC #$02
  STA $0200

  LDA $0203     ;MOVE SPRITE RIGHT
  CLC
  ADC #$02
  STA $0203
JUMPDOWNRIGHTLOOPEND:

CHECKBOTHVARSRIGHT:
  LDA RIGHTDOWNCOUNTER          ;SEE IF BOTH CYCLES HAVE COMPLETED
  CMP #$08
  BNE CHECKBOTHVARSRIGHTEND
  LDA RIGHTUPCOUNTER
  CMP #$05
  BNE CHECKBOTHVARSRIGHTEND

  LDA #$0
  STA GORIGHT

  LDA #$1                       ;MAKE BIRD FALL AGAIN
  STA FALLING

CHECKBOTHVARSRIGHTEND:

JUMPRIGHTEND:

;==========================================
;THIS SECTION WORKS PRETTY MUCH THE SAME AS
;           THE PREVIOUS ONE
;==========================================

READB: 
  LDA $4016
  AND #%00000001
  BEQ READBDONE

CONTINUEREADB:
  LDA #%00000000        ;FLIP SPRITE HORIZONTALLY TO THE LEFT
  STA $0202

  LDA #$1                 ;DISABLE RIGHT JUMP
  STA GOLEFT
  STA GOINGLEFTUP
  LDA #$0
  STA GORIGHT
  STA RIGHTDOWNCOUNTER
  STA RIGHTUPCOUNTER
  STA GOINGRIGHTDOWN
  STA GOINGRIGHTDOWN
  STA RIGHTSWITCHED

  STA LEFTUPCOUNTER
  STA LEFTDOWNCOUNTER
  STA GOINGLEFTUP
  STA GOINGLEFTDOWN
  STA LEFTSWITCHED

  JMP JUMPLEFT

SWITCHLEFTUPDOWN:
  JSR SWITCHLEFTUPDOWNSUB

READBDONE:

JUMPLEFT:
  LDA GOLEFT       ;DONT GO LEFT CONSTANTLY
  CMP #$1
  BEQ CONTINUELEFT
  JMP JUMPLEFTEND

CONTINUELEFT:
  LDA #$0
  STA FALLING

JUMPUPLEFTLOOP:
  LDA GOINGLEFTDOWN
  CMP #$1
  BEQ JUMPUPLEFTLOOPEND

  LDA #$1
  STA GOINGLEFTUP
  LDA #$0
  STA GOINGLEFTDOWN

  INC LEFTUPCOUNTER
  LDA LEFTUPCOUNTER
  CMP #$05
  BEQ JUMPUPLEFTLOOPEND

  LDA $0200     ;MOVE SPRITE UP
  CLC
  SBC #$02
  STA $0200

  LDA $0203     ;MOVE SPRITE RIGHT
  SEC
  SBC #$02
  STA $0203
JUMPUPLEFTLOOPEND:
  LDA LEFTSWITCHED
  CMP #$1
  BEQ JUMPDOWNLEFTLOOP
  LDA LEFTUPCOUNTER
  CMP #$05
  BEQ SWITCHLEFTUPDOWN

JUMPDOWNLEFTLOOP:

  LDA GOINGLEFTUP
  CMP #$1
  BEQ JUMPDOWNLEFTLOOPEND

  LDA #$1
  STA GOINGLEFTDOWN
  LDA #$0
  STA GOINGLEFTUP

  INC LEFTDOWNCOUNTER
  LDA LEFTDOWNCOUNTER
  CMP #$08
  BEQ JUMPDOWNLEFTLOOPEND

  LDA $0200     ;MOVE SPRITE DOWN
  CLC
  ADC #$02
  STA $0200

  LDA $0203     ;MOVE SPRITE LEFT
  SEC
  SBC #$02
  STA $0203
JUMPDOWNLEFTLOOPEND:

CHECKBOTHVARSLEFT:
  LDA LEFTDOWNCOUNTER
  CMP #$08
  BNE CHECKBOTHVARSLEFTEND
  LDA LEFTUPCOUNTER
  CMP #$05
  BNE CHECKBOTHVARSLEFTEND

  LDA #$0
  STA GOLEFT

  LDA #$1
  STA FALLING

CHECKBOTHVARSLEFTEND:

JUMPLEFTEND:

READSELECT:
  LDA $4016
  AND #%00000001
  BEQ READSELECTDONE
READSELECTDONE:

READSTART:
  LDA $4016
  AND #%00000001
  BEQ READSTARTDONE
READSTARTDONE:
  
READUP:
  LDA $4016
  AND #%0000001
  BEQ READUPDONE
READUPDONE:

READDOWN:
  LDA $4016
  AND #%00000001
  BEQ READDOWNDONE
READDOWNDONE:

READLEFT:
  LDA $4016
  AND #%00000001
  BEQ READLEFTDONE
READLEFTDONE:

READRIGHT:
  LDA $4016
  AND #%00000001
  BEQ READRIGHTDONE
READRIGHTDONE:

FALL:               ;FALL
  LDA FALLING       ;SEE IF SUPPOSED TO FALL
  CMP #$0
  BEQ DONTFALL

  LDA $0200         ;MOVE DOWN
  CLC
  ADC #$02
  STA $0200
DONTFALL:

ADVANCEFRAME:
  JMP ADVANCEFRAMEFUNC

  RTI             ; RETURN FROM INTERRUPT
 
;;;;;;;;;;;;;;  
  
  
  
  .BANK 1
  .ORG $E000
PALETTE:
  .DB $0F,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3A,$3B,$3C,$3D,$3E,$0F
  .DB $0F,$30,$06,$27

SPRITES:
     ;VERT TILE ATTR HORIZ
  .DB $80, $01, $00, $80    ;SPRITE 0
  ;.DB $50, $10, $00, $60    ;SPRITE 1

  .ORG $FFFA     ;FIRST OF THE THREE VECTORS STARTS HERE
  .DW NMI        ;WHEN AN NMI HAPPENS (ONCE PER FRAME IF ENABLED) THE 
                   ;PROCESSOR WILL JUMP TO THE LABEL NMI:
  .DW RESET      ;WHEN THE PROCESSOR FIRST TURNS ON OR IS RESET, IT WILL JUMP
                   ;TO THE LABEL RESET:
  .DW 0          ;EXTERNAL INTERRUPT IRQ IS NOT USED IN THIS TUTORIAL
  
  
;;;;;;;;;;;;;;  
  
  
  .BANK 2
  .ORG $0000
  .INCBIN "GAME.CHR"   ;INCLUDES 8KB GRAPHICS FILE FROM SMB1